# This workflow will install Python dependencies, run tests, and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      deploy_output: ${{ steps.set-final-output.outputs.proceed }}

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt install mysql-client mysql-server
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Test with pytest
      run: |
        pytest

    - name: Verify directory contents
      run: ls -R ./app/churn_guard/guard_deploy/

    - name: Set Environment Variables
      id: set-output
      run: |
        echo "DBNAME=${{ secrets.DBNAME }}" >> $GITHUB_ENV
        echo "HOSTNAME=${{ secrets.HOSTNAME }}" >> $GITHUB_ENV
        echo "MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}" >> $GITHUB_ENV
        echo "MYSQL_USERNAME=${{ secrets.MYSQL_USERNAME }}" >> $GITHUB_ENV
        echo "PROCESSED_DATASET_NAME=${{ secrets.PROCESSED_DATASET_NAME }}" >> $GITHUB_ENV
        echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
        echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
        echo "BUCKET_NAME=${{ secrets.BUCKET_NAME }}" >> $GITHUB_ENV
        echo "OBJECTNAME=${{ secrets.OBJECTNAME }}" >> $GITHUB_ENV
        echo "MLFLOW_TRACKING_URI=${{ secrets.MLFLOW_TRACKING_URI }}" >> $GITHUB_ENV

    - name: Print Environment Variable
      run: |
        echo "DBNAME is $DBNAME"
        echo "MYSQL_USERNAME is $MYSQL_USERNAME"
        echo "MYSQL_USERNAME is $PROCESSED_DATASET_NAME"
        echo '=================================='

    - name: Test MySQL Connection
      run: |
        sudo apt-get update
        sudo apt-get install -y mysql-client
        mysql -h $HOSTNAME -u test -p'$MYSQL_PASSWORD' -e 'SHOW DATABASES;'


    - name: Run Script
      run: |
        python run.py

    - name: Capture Last Output
      run: |
        last_line=$(tail -n 1 result.txt)
        echo "FINAL_RESULT=$last_line" >> $GITHUB_ENV

    - name: Debug Output
      run: echo "proceed=$FINAL_RESULT"

    - name: Set output
      id: set-final-output
      run: echo "proceed=$FINAL_RESULT" >> $GITHUB_OUTPUT



  docker:
    runs-on: ubuntu-latest
    needs: build
    if: ${{ needs.build.outputs.deploy_output == 'True' }}

    steps:
      - name: Run this job if the deploy condition is met
        run: |
          echo proceed = ${{  needs.build.outputs.deploy_output }}
          echo "This job is running because the deploy condition was met"
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: "{{defaultContext}}:app/churn_guard/guard_deploy"
          push: true
          tags: freshinit/fresh:${{ github.sha }}
          build-args: |
            BUCKET_NAME=${{ secrets.BUCKET_NAME }}
            AWS_SERVER_PUBLIC_KEY=${{ secrets.AWS_SERVER_PUBLIC_KEY }}
            AWS_SERVER_SECRET_KEY=${{ secrets.AWS_SERVER_SECRET_KEY }}
            OBJECTNAME=${{ secrets.OBJECTNAME }}
            MLFLOW_TRACKING_URI=${{ secrets.MLFLOW_TRACKING_URI }}

  deploy:
    runs-on: ubuntu-latest
    needs: docker
    steps:

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Pull new Docker image
        run: docker pull freshinit/fresh:${{ github.sha }}

      - name: Stop running container
        run: |
          CONTAINER_ID=$(docker ps -q --filter ancestor=freshinit/fresh)
          if [ ! -z "$CONTAINER_ID" ]; then
            docker stop $CONTAINER_ID
            docker rm $CONTAINER_ID
          fi

      - name: Deploy new model
        run: docker run -d -p 80:80 freshinit/fresh:${{ github.sha }}
