# This workflow will install Python dependencies, run tests, and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt install mysql-client mysql-server
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    # - name: Lint with flake8
    #   run: |
    #     # stop the build if there are Python syntax errors or undefined names
    #     flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
    #     # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
    #     flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      run: |
        pytest
    - name: Verify directory contents
      run: ls -R ./app/churn_guard/guard_deploy/
    - name: Test MySQL Connection
      run: |
        sudo apt-get update
        sudo apt-get install -y mysql-client
        mysql -h 54.162.68.42 -u test -p'#Testinit24' -e 'SHOW DATABASES;'


    - name: Train and Deploy Model
      id: set-output
      run: |
          chmod +x run.sh
          source ./run.sh
          echo "proceed=$DEPLOY" >> $GITHUB_ENV
      env:

          MYSQL_USERNAME: "Fresh" #${{ secrets.MYSQL_USERNAME }}
          MYSQL_PASSWORD: "#Freshcodes24" #${{ secrets.MYSQL_PASSWORD }}
          HOSTNAME: "54.162.68.42" #${{ secrets.HOSTNAME }}
          DBNAME: "Customermdb" #${{ secrets.DBNAME }}

    - name: Set output
      id: set-final-output
      run: echo "proceed=${{ env.proceed }}"

  docker:
    runs-on: ubuntu-latest
    needs: build  # This ensures the docker job runs after the build job
    if: ${{ needs.build.outputs.proceed == 'True' }}
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: "{{defaultContext}}:app/churn_guard/guard_deploy"
          push: true
          tags: freshinit/fresh:${{ github.sha }}
          build-args: |
            BUCKET_NAME=${{ secrets.BUCKET_NAME }}
            AWS_SERVER_PUBLIC_KEY=${{ secrets.AWS_SERVER_PUBLIC_KEY }}
            AWS_SERVER_SECRET_KEY=${{ secrets.AWS_SERVER_SECRET_KEY }}
            OBJECTNAME=${{ secrets.OBJECTNAME }}
            MLFLOW_TRACKING_URI=${{ secrets.MLFLOW_TRACKING_URI }}

  deploy:
    runs-on: ubuntu-latest
    needs: docker
    steps:
      - name: Deploy new model
        run: |
          docker pull freshinit/fresh:${{ github.sha }}
          docker stop $(docker ps -q --filter ancestor=freshinit/fresh)
          docker run -d -p 80:80 mydockerhub/myapp:${{ github.sha }}
